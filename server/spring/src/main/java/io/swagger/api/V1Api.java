/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Book;
import io.swagger.model.Category;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-09T10:58:41.434+08:00")

@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    @ApiOperation(value = "获取全部分类", notes = "", response = Category.class, responseContainer = "List", tags={ "category-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Category.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/v1/category/",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<Category>> getAllUsingGET() {
        // do some magic!
        return new ResponseEntity<List<Category>>(HttpStatus.OK);
    }


    @ApiOperation(value = "根据ID获取书籍", notes = "", response = Book.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "book-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/v1/book/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Book> getBookByIdUsingGET(@ApiParam(value = "id",required=true ) @PathVariable("id") Integer id) {
        // do some magic!
        return new ResponseEntity<Book>(HttpStatus.OK);
    }


    @ApiOperation(value = "根据分类获取书籍", notes = "", response = Book.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "book-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/v1/book/getByCategoryId",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<Book>> getBooksByCategoryUsingGET( @NotNull@ApiParam(value = "id", required = true) @RequestParam(value = "id", required = true) Integer id) {
        // do some magic!
        return new ResponseEntity<List<Book>>(HttpStatus.OK);
    }


    @ApiOperation(value = "根据ID获取分类", notes = "", response = Category.class, tags={ "category-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Category.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/v1/category/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<Category> getUsingGET(@ApiParam(value = "id",required=true ) @PathVariable("id") Integer id) {
        // do some magic!
        return new ResponseEntity<Category>(HttpStatus.OK);
    }


    @ApiOperation(value = "更新书籍", notes = "", response = Boolean.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "book-api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class),
        @ApiResponse(code = 201, message = "Created", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Void.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Void.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/v1/book/update",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Boolean> updateUsingPOST(@ApiParam(value = "id"  )  @Valid @RequestBody Integer id) {
        // do some magic!
        return new ResponseEntity<Boolean>(HttpStatus.OK);
    }

}
